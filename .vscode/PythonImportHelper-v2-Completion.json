[
    {
        "label": "Strategy",
        "importPath": "backtesting",
        "description": "backtesting",
        "isExtraImport": true,
        "detail": "backtesting",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "backtesting",
        "description": "backtesting",
        "isExtraImport": true,
        "detail": "backtesting",
        "documentation": {}
    },
    {
        "label": "ta",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ta",
        "description": "ta",
        "detail": "ta",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "MetaTrader5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "MetaTrader5",
        "description": "MetaTrader5",
        "detail": "MetaTrader5",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BaseStrategy",
        "importPath": "src.core.base_strategy",
        "description": "src.core.base_strategy",
        "isExtraImport": true,
        "detail": "src.core.base_strategy",
        "documentation": {}
    },
    {
        "label": "BaseStrategy",
        "importPath": "src.core.base_strategy",
        "description": "src.core.base_strategy",
        "isExtraImport": true,
        "detail": "src.core.base_strategy",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "src.utils.logger",
        "description": "src.utils.logger",
        "isExtraImport": true,
        "detail": "src.utils.logger",
        "documentation": {}
    },
    {
        "label": "DatabaseManager",
        "importPath": "src.database.db_manager",
        "description": "src.database.db_manager",
        "isExtraImport": true,
        "detail": "src.database.db_manager",
        "documentation": {}
    },
    {
        "label": "MT5Connector",
        "importPath": "src.mt5_connector",
        "description": "src.mt5_connector",
        "isExtraImport": true,
        "detail": "src.mt5_connector",
        "documentation": {}
    },
    {
        "label": "StrategyManager",
        "importPath": "src.strategy_manager",
        "description": "src.strategy_manager",
        "isExtraImport": true,
        "detail": "src.strategy_manager",
        "documentation": {}
    },
    {
        "label": "DataFetcher",
        "importPath": "src.core.data_fetcher",
        "description": "src.core.data_fetcher",
        "isExtraImport": true,
        "detail": "src.core.data_fetcher",
        "documentation": {}
    },
    {
        "label": "Trader",
        "importPath": "src.core.trader",
        "description": "src.core.trader",
        "isExtraImport": true,
        "detail": "src.core.trader",
        "documentation": {}
    },
    {
        "label": "TradeMonitor",
        "importPath": "src.core.trade_monitor",
        "description": "src.core.trade_monitor",
        "isExtraImport": true,
        "detail": "src.core.trade_monitor",
        "documentation": {}
    },
    {
        "label": "setup_parser",
        "importPath": "src.ui.cli",
        "description": "src.ui.cli",
        "isExtraImport": true,
        "detail": "src.ui.cli",
        "documentation": {}
    },
    {
        "label": "Dashboard",
        "importPath": "src.ui.gui.dashboard",
        "description": "src.ui.gui.dashboard",
        "isExtraImport": true,
        "detail": "src.ui.gui.dashboard",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BacktestMACDStrategy",
        "kind": 6,
        "importPath": "backtests.strategies.backtest_macd_strategy",
        "description": "backtests.strategies.backtest_macd_strategy",
        "peekOfCode": "class BacktestMACDStrategy(Strategy):\n    # Strategy parameters\n    fast_period = 12\n    slow_period = 26\n    signal_period = 9\n    size = 0.1  # Trade size in units (ounces for XAUUSDm), reduced to fit margin\n    def init(self):\n        \"\"\"Initialize the strategy\"\"\"\n        # Convert self.data.Close to a pandas Series\n        close = pd.Series(self.data.Close, index=self.data.index)",
        "detail": "backtests.strategies.backtest_macd_strategy",
        "documentation": {}
    },
    {
        "label": "BacktestRSIStrategy",
        "kind": 6,
        "importPath": "backtests.strategies.backtest_rsi_strategy",
        "description": "backtests.strategies.backtest_rsi_strategy",
        "peekOfCode": "class BacktestRSIStrategy(Strategy):\n    # Strategy parameters\n    period = 14\n    overbought = 70\n    oversold = 30\n    size = 0.1  # Trade size in units (ounces for XAUUSDm), reduced to fit margin\n    def init(self):\n        \"\"\"Initialize the strategy\"\"\"\n        # Convert self.data.Close to a pandas Series\n        close = pd.Series(self.data.Close, index=self.data.index)",
        "detail": "backtests.strategies.backtest_rsi_strategy",
        "documentation": {}
    },
    {
        "label": "BaseStrategy",
        "kind": 6,
        "importPath": "src.core.base_strategy",
        "description": "src.core.base_strategy",
        "peekOfCode": "class BaseStrategy(ABC):\n    def __init__(self, params, db):\n        \"\"\"Initialize strategy with parameters and database connection\"\"\"\n        self.default_symbol = params.get('symbol', 'BTCUSDm')  # Default symbol\n        self.symbol = self.default_symbol\n        self.timeframe = params.get('timeframe', 15)  # M15 by default\n        self.volume = params.get('volume', 0.01)\n        self.db = db\n        self.logger = logging.getLogger(__name__)\n    def fetch_data(self, symbol=None):",
        "detail": "src.core.base_strategy",
        "documentation": {}
    },
    {
        "label": "DataFetcher",
        "kind": 6,
        "importPath": "src.core.data_fetcher",
        "description": "src.core.data_fetcher",
        "peekOfCode": "class DataFetcher:\n    def __init__(self, mt5_conn, db):\n        self.mt5_conn = mt5_conn\n        self.db = db\n        self.logger = logging.getLogger(__name__)\n        self.pairs = self.load_pairs()\n    def load_pairs(self):\n        \"\"\"Load trading pairs from config\"\"\"\n        try:\n            with open('src/config/config.yaml', 'r') as file:",
        "detail": "src.core.data_fetcher",
        "documentation": {}
    },
    {
        "label": "Trader",
        "kind": 6,
        "importPath": "src.core.trader",
        "description": "src.core.trader",
        "peekOfCode": "class Trader:\n    def __init__(self, strategy_manager, mt5_conn):\n        self.strategy_manager = strategy_manager\n        self.mt5_conn = mt5_conn\n        self.logger = logging.getLogger(__name__)\n    def execute_trades(self, strategy_name: str = None):\n        \"\"\"Generate signals and place orders\"\"\"\n        signals = self.strategy_manager.generate_signals(strategy_name)\n        for signal in signals:\n            if self.mt5_conn.get_open_positions_count() >= 5:",
        "detail": "src.core.trader",
        "documentation": {}
    },
    {
        "label": "TradeMonitor",
        "kind": 6,
        "importPath": "src.core.trade_monitor",
        "description": "src.core.trade_monitor",
        "peekOfCode": "class TradeMonitor:\n    def __init__(self, strategy_manager, mt5_conn):\n        self.strategy_manager = strategy_manager\n        self.mt5_conn = mt5_conn\n        self.logger = logging.getLogger(__name__)\n    def monitor_positions(self, strategy_name: str = None):\n        \"\"\"Monitor and close positions based on exit strategy\"\"\"\n        self.mt5_conn.monitor_and_close_positions(strategy_name)",
        "detail": "src.core.trade_monitor",
        "documentation": {}
    },
    {
        "label": "DatabaseManager",
        "kind": 6,
        "importPath": "src.database.db_manager",
        "description": "src.database.db_manager",
        "peekOfCode": "class DatabaseManager:\n    def __init__(self, db_path):\n        self.db_path = db_path\n        self.conn = None\n        self.logger = logging.getLogger(__name__)\n    def connect(self):\n        \"\"\"Establish database connection\"\"\"\n        try:\n            if not os.path.exists(os.path.dirname(self.db_path)):\n                self.logger.error(f\"Database directory does not exist: {os.path.dirname(self.db_path)}\")",
        "detail": "src.database.db_manager",
        "documentation": {}
    },
    {
        "label": "MACDStrategy",
        "kind": 6,
        "importPath": "src.strategies.macd_strategy",
        "description": "src.strategies.macd_strategy",
        "peekOfCode": "class MACDStrategy(BaseStrategy):\n    def __init__(self, params, db):\n        super().__init__(params, db)\n        self.fast_period = params.get('fast_period', 12)\n        self.slow_period = params.get('slow_period', 26)\n        self.signal_period = params.get('signal_period', 9)\n    def generate_entry_signal(self, symbol=None):\n        \"\"\"Generate entry signal based on MACD\"\"\"\n        data = self.fetch_data(symbol)\n        if data.empty:",
        "detail": "src.strategies.macd_strategy",
        "documentation": {}
    },
    {
        "label": "RSIStrategy",
        "kind": 6,
        "importPath": "src.strategies.rsi_strategy",
        "description": "src.strategies.rsi_strategy",
        "peekOfCode": "class RSIStrategy(BaseStrategy):\n    def __init__(self, params, db):\n        super().__init__(params, db)\n        self.period = params.get('period', 14)\n        self.overbought = params.get('overbought', 70)\n        self.oversold = params.get('oversold', 30)\n    def generate_entry_signal(self, symbol=None):\n        \"\"\"Generate entry signal based on RSI\"\"\"\n        data = self.fetch_data(symbol)\n        if data.empty:",
        "detail": "src.strategies.rsi_strategy",
        "documentation": {}
    },
    {
        "label": "Dashboard",
        "kind": 6,
        "importPath": "src.ui.gui.dashboard",
        "description": "src.ui.gui.dashboard",
        "peekOfCode": "class Dashboard(QMainWindow):\n    def __init__(self, db):\n        \"\"\"Initialize the dashboard with database connection\"\"\"\n        super().__init__()\n        self.db = db\n        self.logger = logging.getLogger(__name__)\n        self.init_ui()\n    def init_ui(self):\n        \"\"\"Set up the main dashboard UI\"\"\"\n        self.setWindowTitle(\"FX Trading Bot Dashboard\")",
        "detail": "src.ui.gui.dashboard",
        "documentation": {}
    },
    {
        "label": "setup_parser",
        "kind": 2,
        "importPath": "src.ui.cli",
        "description": "src.ui.cli",
        "peekOfCode": "def setup_parser():\n    \"\"\"Set up argument parser for CLI\"\"\"\n    parser = argparse.ArgumentParser(description=\"FX Trading Bot\")\n    parser.add_argument('--mode', choices=['live', 'gui'], default='live',\n                        help='Mode to run the bot in: live or gui')\n    parser.add_argument('--strategy', type=str, default=None,\n                        help='Strategy to use (e.g., rsi, macd)')\n    return parser",
        "detail": "src.ui.cli",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "src.utils.logger",
        "description": "src.utils.logger",
        "peekOfCode": "def setup_logging():\n    \"\"\"Set up logging configuration for the application\"\"\"\n    # Ensure logs directory exists\n    log_dir = 'logs'\n    os.makedirs(log_dir, exist_ok=True)\n    # Configure logging\n    logging.basicConfig(\n        level=logging.DEBUG,\n        format='%(asctime)s - %(levelname)s - %(message)s',\n        handlers=[",
        "detail": "src.utils.logger",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def main():\n    # Setup logging\n    setup_logging()\n    # Parse arguments\n    parser = setup_parser()\n    args = parser.parse_args()\n    # Initialize database\n    db_path = os.path.join('src', 'data', 'market_data.sqlite')  # Normalize path\n    # Ensure the data directory exists\n    os.makedirs(os.path.dirname(db_path), exist_ok=True)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "MLStrategyManager",
        "kind": 6,
        "importPath": "src.ml_strategy_manager",
        "description": "src.ml_strategy_manager",
        "peekOfCode": "class MLStrategyManager:\n    def __init__(self, db):\n        self.db = db\n        self.logger = logging.getLogger(__name__)\n    def generate_signals(self):\n        \"\"\"Generate ML-based trading signals (placeholder)\"\"\"\n        self.logger.debug(\"MLStrategyManager is not implemented yet\")\n        return []",
        "detail": "src.ml_strategy_manager",
        "documentation": {}
    },
    {
        "label": "MT5Connector",
        "kind": 6,
        "importPath": "src.mt5_connector",
        "description": "src.mt5_connector",
        "peekOfCode": "class MT5Connector:\n    def __init__(self, db):\n        self.db = db\n        self.logger = logging.getLogger(__name__)\n        # Load credentials from config.yaml or environment variables\n        with open('src/config/config.yaml', 'r') as file:\n            config = yaml.safe_load(file)\n        mt5_config = config.get('mt5', {})\n        self.login = int(os.getenv(\"MT5_LOGIN\", mt5_config.get('login', 0)))\n        self.password = os.getenv(\"MT5_PASSWORD\", mt5_config.get('password', \"\"))",
        "detail": "src.mt5_connector",
        "documentation": {}
    },
    {
        "label": "StrategyManager",
        "kind": 6,
        "importPath": "src.strategy_manager",
        "description": "src.strategy_manager",
        "peekOfCode": "class StrategyManager:\n    def __init__(self, db):\n        \"\"\"Initialize strategy manager with config and database\"\"\"\n        self.db = db\n        self.strategies = []\n        self.logger = logging.getLogger(__name__)\n        self.load_config()\n    def load_config(self) -> None:\n        \"\"\"Load strategy configurations from YAML and store in database\"\"\"\n        try:",
        "detail": "src.strategy_manager",
        "documentation": {}
    }
]